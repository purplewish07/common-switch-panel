/// <reference types="grafana-sdk-mocks/app/headers/common" />
import { MetricsPanelCtrl } from 'app/plugins/sdk';
export declare class commonSwitchPanelCtrl extends MetricsPanelCtrl {
    static templateUrl: string;
    defaults: {
        commonVarName: string;
        commonVarArray: any[];
        noBeyond: boolean;
        mode: string;
        commonTitle: string;
        commonFontSize: string;
        commonFontColor: string;
        commoneTitleAdjFontSize: boolean;
        updataTime: string;
        queryDate: string;
        timeMode: string;
        dateMode: string;
        yearFrom: string;
        yearTo: string;
        trueTime: string;
        timeRangeEnable: boolean;
        tableData: string;
        dayFromShift: number;
        dayFromType: string;
        dayToType: string;
        dayToShift: number;
        commonSwitchVersion: string;
    };
    normalVarOption: any[];
    normalVarArrayData: any[];
    commonSwitch: any;
    titleFontSizeVWList: any[];
    imageStyle: any;
    borderStyle: any;
    fontColorStyle: any;
    selectedItems: any;
    timeValue: any;
    customTimePickerData: any;
    timeZoneData: any;
    dateMath: any;
    showFlag: any;
    fontSizeData: any;
    queryDateArray: any[];
    dataList: any;
    dataTypeList: any;
    timeData: any;
    windowObj: any;
    titleInvalid: boolean;
    elem: any;
    renderFlag: boolean;
    modeOptions: string[];
    dateModeOptions: string[];
    yearFromOptions: any[];
    yearToOptions: any[];
    timeSelectedArr: any[];
    yearMonthFromOptions: any[];
    yearMonthToOptions: any[];
    tableColumns: any[];
    tableTypeFlag: boolean;
    timeShiftOption: string[];
    refreshTimeFlag: any;
    fontColorData: any;
    isPc: boolean;
    firstload: boolean;
    constructor($scope: any, $injector: any, $window: any, $timeout: any);
    onInitEditMode(): void;
    onInitPanelActions(): void;
    addVarItem(): void;
    removeVarItem(index: any, name: any): void;
    variableUpdated(variable: any, emitChangeEvents: any): void;
    getFontSizeVwOrPx(t: any): any;
    fontSizeChanged(): void;
    moveVariable(index: any, dir: any): void;
    onRender(): void;
    initI18n(): void;
    initDefaultI18n(): void;
    totalFun(): void;
    handleYearChangedonRender(): void;
    hiddenFun(): void;
    clearFilterFun(): void;
    showDropDown(): void;
    hideDropDownFun(): void;
    setActiveTimeOption(): any;
    onChangeTimePicker(timeRange: any): void;
    onDataReceived(data: any): void;
    handleUpdataFun(): void;
    validTitleFun(): void;
    initFun(): void;
    handleYearFromFun(): void;
    handleModeOneHistoryYearFun(): void;
    handleModeOneCurrentYearFun(): void;
    getLastDay(year: any, month: any): number;
    handleTrueTimeChanged(): void;
    todayFormatFun(type: any, data: any): string;
    todayFun(): void;
    handleYearChanged(): void;
    handleCurrentYearMonthFun(): void;
    handleHistoryYearMonthFun(): void;
    calDetailsDayFun(toD: any, year: any, month: any, fromYearTime: any, fromMonthTime: any, dayData: any): void;
    fromProducteToFun(year: any, fromTimeD: any, toTimeD: any, month: any): void;
    handleTimeShiftFun(): void;
    link(scope: any, elem: any, attrs: any, ctrl: any): void;
}
export { commonSwitchPanelCtrl as PanelCtrl };
